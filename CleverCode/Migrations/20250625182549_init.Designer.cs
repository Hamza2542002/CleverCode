// <auto-generated />
using System;
using CleverCode.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleverCode.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250625182549_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CleverCode.Models.CompanyInformation", b =>
                {
                    b.Property<int>("Company_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Company_ID"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Logo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Mission")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ResponseTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SocialLink")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Story")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Vision")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Company_ID");

                    b.ToTable("CompanyInformations");
                });

            modelBuilder.Entity("CleverCode.Models.CompanyValues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Company_ID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Company_ID");

                    b.ToTable("CompanyValues");
                });

            modelBuilder.Entity("CleverCode.Models.Complaint", b =>
                {
                    b.Property<int>("Complaint_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Complaint_ID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Priority")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Service_ID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Complaint_ID");

                    b.HasIndex("Service_ID");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("CleverCode.Models.ContactInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Company_ID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Company_ID")
                        .IsUnique();

                    b.ToTable("ContactInfo");
                });

            modelBuilder.Entity("CleverCode.Models.FAQ", b =>
                {
                    b.Property<int>("FAQ_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FAQ_ID"));

                    b.Property<string>("Answer")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Questions")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("FAQ_ID");

                    b.ToTable("FAQs");
                });

            modelBuilder.Entity("CleverCode.Models.Message", b =>
                {
                    b.Property<int>("Message_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Message_ID"));

                    b.Property<string>("Company")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("MessageText")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Service_ID")
                        .HasColumnType("int");

                    b.HasKey("Message_ID");

                    b.HasIndex("Service_ID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("CleverCode.Models.Project", b =>
                {
                    b.Property<int>("Project_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Project_ID"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("Tech")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Project_ID");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("CleverCode.Models.ProjectService", b =>
                {
                    b.Property<int>("Project_ID")
                        .HasColumnType("int");

                    b.Property<int>("Service_ID")
                        .HasColumnType("int");

                    b.HasKey("Project_ID", "Service_ID");

                    b.HasIndex("Service_ID");

                    b.ToTable("ProjectServices");
                });

            modelBuilder.Entity("CleverCode.Models.Review", b =>
                {
                    b.Property<int>("Review_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Review_ID"));

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Company")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<int?>("Service_ID")
                        .HasColumnType("int");

                    b.HasKey("Review_ID");

                    b.HasIndex("Service_ID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("CleverCode.Models.Service", b =>
                {
                    b.Property<int>("Service_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Service_ID"));

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Feature")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Icon")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Pricing")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TimeLine")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Service_ID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("CleverCode.Models.TeamMember", b =>
                {
                    b.Property<int>("TeamMember_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamMember_ID"));

                    b.Property<string>("BIO")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("LinkedInUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Role")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TeamMember_ID");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("CleverCode.Models.CompanyValues", b =>
                {
                    b.HasOne("CleverCode.Models.CompanyInformation", "CompanyInformation")
                        .WithMany("Values")
                        .HasForeignKey("Company_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyInformation");
                });

            modelBuilder.Entity("CleverCode.Models.Complaint", b =>
                {
                    b.HasOne("CleverCode.Models.Service", "Service")
                        .WithMany("Complaints")
                        .HasForeignKey("Service_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Service");
                });

            modelBuilder.Entity("CleverCode.Models.ContactInfo", b =>
                {
                    b.HasOne("CleverCode.Models.CompanyInformation", "CompanyInformation")
                        .WithOne("ContactInfo")
                        .HasForeignKey("CleverCode.Models.ContactInfo", "Company_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyInformation");
                });

            modelBuilder.Entity("CleverCode.Models.Message", b =>
                {
                    b.HasOne("CleverCode.Models.Service", "Service")
                        .WithMany("Messages")
                        .HasForeignKey("Service_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Service");
                });

            modelBuilder.Entity("CleverCode.Models.ProjectService", b =>
                {
                    b.HasOne("CleverCode.Models.Project", "Project")
                        .WithMany("ProjectServices")
                        .HasForeignKey("Project_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleverCode.Models.Service", "Service")
                        .WithMany("ProjectServices")
                        .HasForeignKey("Service_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("CleverCode.Models.Review", b =>
                {
                    b.HasOne("CleverCode.Models.Service", "Service")
                        .WithMany("Reviews")
                        .HasForeignKey("Service_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Service");
                });

            modelBuilder.Entity("CleverCode.Models.CompanyInformation", b =>
                {
                    b.Navigation("ContactInfo");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("CleverCode.Models.Project", b =>
                {
                    b.Navigation("ProjectServices");
                });

            modelBuilder.Entity("CleverCode.Models.Service", b =>
                {
                    b.Navigation("Complaints");

                    b.Navigation("Messages");

                    b.Navigation("ProjectServices");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
